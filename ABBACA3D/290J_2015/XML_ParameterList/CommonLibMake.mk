#############################################################################
#                    CommonLibMake.mk 
#!!!!!!!!!!!!!!!!!!!!!!! Do Not Edit !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#            All variables required by this script are specfied 
#               before this script is included. 
#############################################################################
#
# Common source file for creating component libraries.
#
# Variables that must be specified prior to including this
# file are
# 
# SRC_DIR         : Directory containing source for the 
#                   library. All *.c and *.cpp files in this
#                   directory will be inluded in the library.
#                   This is the only means of specifying source
#                   files. If one wants a library that contains
#                   files located in more than one directory, then
#                   one should use the ComponentMake.mk makefile. 
#                   
#
# INCLUDES        : The list of include files required to 
#                   compile the sources, in the form 
#                   -Idir1 -Idir2 ...
#
# DEBUG_LIBRARY   : The name of the target debug library
# RELEASE_LIBRARY : The name of the target release library
# COMMON_INCLUDE  : The name of the common include directory (optional)
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# clean removes the library file that is created.
#
# cleanAll removes the library file and the dependency files.
#
# If a source file is added, removed, or "touched" then this
# triggers a complete rebuild of the library. 
#
#############################################################################
#
# Copyright 2007-2015 Chris Anderson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Lesser GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# For a copy of the GNU General Public License see
# <http://www.gnu.org/licenses/>.
#
#############################################################################
#

VPATH        += $(SRC_DIR) 
RELEASE_DIR  := ./_release
DEBUG_DIR    := ./_debug

ifndef VERBOSE
QUIET     :=@
MAKEFLAGS += --no-print-directory
MAKEFLAGS := $(sort $(MAKEFLAGS))
endif

#
# Dependencies are generated by all of the .c and .cpp
# files in the SRC_DIR directory.
#
Cfiles     = $(wildcard $(SRC_DIR)/*.c)
CPPfiles   = $(wildcard $(SRC_DIR)/*.cpp) 

ifeq ($(MAKECMDGOALS),release)
BUILD_LIBRARY       =$(RELEASE_LIBRARY)
OBJ_OUTPUT          =$(RELEASE_DIR)
EXISTING_OBJ_NAMES  = $(patsubst %.o,%,$(notdir $(wildcard $(RELEASE_DIR)/*.o)))
endif
ifeq ($(MAKECMDGOALS),debug)
BUILD_LIBRARY       =$(DEBUG_LIBRARY)
OBJ_OUTPUT          =$(DEBUG_DIR)
EXISTING_OBJ_NAMES  =$(patsubst %.o,%,$(notdir $(wildcard $(DEBUG_DIR)/*.o)))
endif
#
# This code creates the output directory if it doesn't already
# exist
#
create_output_dir := \
$(shell if [ ! -e $(OBJ_OUTPUT) ]; then mkdir $(OBJ_OUTPUT); fi) 

#
# This following code removes dependency (.d) files from the 
# $(DEBUG_DIR) and $(RELEASE_DIR) directories if the associated 
# source files are not found. If a file is removed then the 
# archive is also removed to force a recreation of the archive.  
#
# This code insures that if a source file is deleted from the 
# source list then it's corresponding dependency file is
# deleted from the system, and hence the associated object file 
# will not be included into the recreated archive. 
#
#
BUILD_NAMES    = $(notdir $(patsubst %.cpp,%,$(CPPfiles)))
BUILD_NAMES   += $(notdir $(patsubst %.c,%,$(Cfiles)))

ifneq ($(words $(EXISTING_OBJ_NAMES)),0)
del_orphaned_objects := \
$(shell for k in $(EXISTING_OBJ_NAMES);              \
    do                                               \
      result=0;                                      \
      for j in $(BUILD_NAMES);                       \
        do if [ $$j = $$k ]; then result=1; fi       \
      done;                                          \
      if [ $$result -eq 0 ]; then                    \
         rm --force "$(OBJ_OUTPUT)/$$k".d;           \
         rm --force  $(BUILD_LIBRARY); fi            \
    done)
endif

#
# This code creates the list of object files with a prefix of
# either $(RELEASE_DIR)/ or $(DEBUG_DIR)/. 
#
# The object files are be placed in subdirectories so that
# we can simultaneously work with debug and release
# versions. 
#

ifeq ($(MAKECMDGOALS),release)
DFILES     = $(patsubst %.d,$(RELEASE_DIR)/%.d,$(notdir $(patsubst %.c,%.d,$(Cfiles))))
DFILES    += $(patsubst %.d,$(RELEASE_DIR)/%.d,$(notdir $(patsubst %.cpp,%.d,$(CPPfiles))))
endif
ifeq ($(MAKECMDGOALS),debug)
DFILES      = $(patsubst %.d,$(DEBUG_DIR)/%.d,$(notdir $(patsubst %.c,%.d,$(Cfiles))))
DFILES     += $(patsubst %.d,$(DEBUG_DIR)/%.d,$(notdir $(patsubst %.cpp,%.d,$(CPPfiles))))
endif

release : $(RELEASE_LIBRARY)
debug   : $(DEBUG_LIBRARY)

COMPONENT_NAME = $(subst .a,,$(notdir $(subst lib,,$(BUILD_LIBRARY))))
CPPCOUNT :=  $(words $(CPPfiles))
CCOUNT   :=  $(words $(Cfiles))

$(BUILD_LIBRARY): $(DFILES)
	$(QUIET)################################################
	# Building $(COMPONENT_NAME) library 
	$(QUIET)################################################
	$(QUIET) if [ $(CCOUNT) != 0 ]; then \
$(CC)  -c $(CFLAGS) $(CDEFINES) $(INCLUDES) $(SRC_DIR)/*.c ; fi
	$(QUIET) if [ $(CPPCOUNT) != 0 ]; then \
$(CXX) -c $(CXXFLAGS) $(CXXDEFINES) $(INCLUDES) $(SRC_DIR)/*.cpp; fi
	$(QUIET)$(AR) rcs  $(BUILD_LIBRARY) *.o
	$(QUIET)-rm *.o
    ifdef COMMON_INCLUDE
	$(QUIET)cp $(SRC_DIR)/*.h $(COMMON_INCLUDE)
    endif
	$(QUIET)################################################
	$(QUIET)#      Done building $(COMPONENT_NAME) library
	$(QUIET)################################################
#
# This code creates the dependency files. This is a slight
# modification of the code given in the GNU make book; a
# dependency list is created that consists of dependency files 
# contained in an OBJ_OUTPUT directory. 
#
# The .o files as a dependency target, as a library
# archive is not updated based upon .o files. 
#
ifeq ($(MAKECMDGOALS),debug)
-include $(DFILES)
endif
ifeq ($(MAKECMDGOALS),release)
-include $(DFILES)
endif

$(OBJ_OUTPUT)/%.d:%.c
	$(QUIET)################################################
	$(QUIET)# Determining dependences of $< 
	$(QUIET)################################################
	$(QUIET)$(call make-depend-c,$<,$@,$(subst .o,.d,$@))
	
$(OBJ_OUTPUT)/%.d:%.cpp
	$(QUIET)################################################
	$(QUIET)# Determining dependences of $< 
	$(QUIET)################################################
	$(QUIET)$(call make-depend-cpp,$<,$@,$(subst .o,.d,$@))
#endif


#$(call make-depend-cpp,source-file,object-file,depend-file)
define make-depend-cpp
	g++ -MM -MF $3 -MP -MT $2 $(CXXFLAGS) $(CXXDEFINES) $(INCLUDES)  $1
endef

#$(call make-depend-c,source-file,object-file,depend-file)
define make-depend-c
	gcc -MM -MF $3 -MP -MT $2 $(CFLAGS) $(CDEFINES) $(INCLUDES)  $1
endef


.PHONY :clean cleanall
clean  :
	rm -f $(RELEASE_LIBRARY);
	rm -f $(DEBUG_LIBRARY); 
cleanall  :
	rm -f $(RELEASE_LIBRARY); 
	rm -f $(DEBUG_LIBRARY); 
	rm -rf $(DEBUG_DIR)
	rm -rf $(RELEASE_DIR)

